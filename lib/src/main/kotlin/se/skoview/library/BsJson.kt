/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package se.skoview.library.bsjson


// import com.sun.xml.internal.ws.developer.Serialization
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.io.File
import java.time.LocalDateTime


/**
 * Riv ta profile
 * Enum class to handle to two allowed values of RIVTAPROFILE in RIVTA.
 *
 * @property profile
 * @constructor Create empty Riv ta profile
 */
@Serializable
enum class RivTaProfile(val profile: String) {
    RIVTABP20("RIVTABP20"),
    RIVTABP21("RIVTABP21")
}

@Serializable
data class Url(
    val adress: String,
)

@Serializable
data class Contract(
    val namnrymd: String,
    val beskrivning: String? = null,
) {
    val majorVersion: Int
        get() {
            return namnrymd.takeLast(1).toInt()
        }
}

@Serializable
data class Component(
    val hsaId: String,
    val beskrivning: String? = null,
)

@Serializable
data class LogicalAddress(
    val hsaId: String,
    val beskrivning: String? = null,
)

/**
 * Authority
 *
 * The create() method makes it possible to instantiate an instance based on other objects.
 *
 * @property tjanstekonsument
 * @property logiskAdress
 * @property tjanstekontrakt
 * @constructor Create empty Authority
 */
@Serializable
data class Authority(
    val tjanstekonsument: String,
    val logiskAdress: String,
    val tjanstekontrakt: String,
) {
    companion object {
        fun create(
            component: Component,
            logicalAddress: LogicalAddress,
            contract: Contract,
        ): Authority {
            return Authority(
                tjanstekonsument = component.hsaId,
                logiskAdress = logicalAddress.hsaId,
                tjanstekontrakt = contract.namnrymd
            )
        }
    }
}

/**
 * Routing
 *
 * The create() method makes it possible to instantiate an instance based on other objects.
 *
 * @property tjanstekomponent
 * @property logiskAdress
 * @property tjanstekontrakt
 * @property rivtaprofil
 * @property adress
 * @constructor Create empty Routing
 */
@Serializable
data class Routing(
    val tjanstekomponent: String,
    val logiskAdress: String,
    val tjanstekontrakt: String,
    val rivtaprofil: RivTaProfile? = null,
    val adress: String? = null,
) {
    companion object {
        fun create(
            component: Component,
            logicalAddress: LogicalAddress,
            contract: Contract,
            rivTaProfile: RivTaProfile,
            url: Url,
        ): Routing {
            return Routing(
                tjanstekomponent = component.hsaId,
                logiskAdress = logicalAddress.hsaId,
                tjanstekontrakt = contract.namnrymd,
                rivtaprofil = rivTaProfile,
                adress = url.adress
            )
        }
    }
}

@Serializable
data class BsJson(
    val plattform: String,
    val utforare: String,
    val kommentar: String? = null,
) {
    private val formatVersion: String = "1.0"
    private val version: String = "1"
    private val bestallningsTidpunkt: String = LocalDateTime.now().toString()
    private val genomforandeTidpunkt: String = LocalDateTime.now().toString()
    private val inkludera: Section = Section()
    private val exkludera: Section = Section()

    fun includeContract(contract: Contract) {
        inkludera.tjanstekontrakt.add(contract)
    }

    fun excludeContract(contract: Contract) {
        exkludera.tjanstekontrakt.add(contract.copy(beskrivning = null))
    }

    fun includeComponent(component: Component) {
        inkludera.tjanstekomponenter.add(component)
    }

    fun excludeComponent(component: Component) {
        exkludera.tjanstekomponenter.add(component.copy(beskrivning = null))
    }

    fun includeLogicalAddress(logicalAddress: LogicalAddress) {
        inkludera.logiskadresser.add(logicalAddress)
    }

    fun excludeLogicalAddress(logicalAddress: LogicalAddress) {
        exkludera.logiskadresser.add(logicalAddress.copy(beskrivning = null))
    }

    fun includeAuthority(authority: Authority) {
        inkludera.anropsbehorigheter.add(authority)
    }

    fun excludeAuthority(authority: Authority) {
        exkludera.anropsbehorigheter.add(authority)
    }

    fun includeRouting(routing: Routing) {
        inkludera.vagval.add(routing)
    }

    fun excludeRouting(routing: Routing) {
        exkludera.vagval.add(
            routing.copy(adress = null)
        )
    }

    @kotlinx.serialization.ExperimentalSerializationApi
    fun writeJsonFile(filename: String?) {
        val jsonOut = Json {
            encodeDefaults = true
            prettyPrint = true
            explicitNulls = false
        }

        val jsonText: String = jsonOut.encodeToString(BsJson.serializer(), this)
        if (! filename.isNullOrBlank()) File("$filename.json").writeText(jsonText)
        else println(jsonText)
    }
}

@Serializable
data class Section(
    val tjanstekomponenter: MutableList<Component> = mutableListOf(),
    val tjanstekontrakt: MutableList<Contract> = mutableListOf(),
    val logiskadresser: MutableList<LogicalAddress> = mutableListOf(),
    val anropsbehorigheter: MutableList<Authority> = mutableListOf(),
    val vagval: MutableList<Routing> = mutableListOf(),
)
