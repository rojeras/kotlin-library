/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package se.skoview.library.bsjson

import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.Json.Default.decodeFromString
import java.io.File
import kotlin.contracts.contract
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class BsJsonTest {
    val platform = "Plattform"

    val bsJson = BsJson(
        plattform = platform,
        utforare = "Utförare",
        kommentar = "kommentar"
    )

    val contract1 = Contract("urn.riv.cliniclaprocess.KalleResponder:1")
    val contract2 = Contract("urn.riv.cliniclaprocess.PelleResponder:2", "Contract2 beskrivning")

    val component1 = Component("SE165567766992-B32", "Aleris Sjukvård AB -- MyAleris")

    val la1 = LogicalAddress("SE2321000016-I1B7", "VE: SLL - Testenhet 17 CSTC")


    @Test
    fun checkPlatformProperty() {
        assertEquals(bsJson.plattform, platform, "platform property not correct")
    }

    @Test
    fun checkMajor() {
        assertEquals(contract1.majorVersion, 1, "Incorrect major returned from Contract")
    }

    /*
    @Test fun checkContractList() {
        bsJson.addIncludeContract(contract1)
        assertEquals(bsJson.includedContracts[0].majorVersion, 1, "Correct major returned from contractList")
    }
     */

    @Test
    @kotlinx.serialization.ExperimentalSerializationApi
    fun checkJsonGeneration() {
        val json = Json {
            encodeDefaults = true
            prettyPrint = true
            explicitNulls = false
        }.encodeToString(BsJson.serializer(), bsJson)

        File("sss.json").writeText(json)
        assertTrue(true, "Always true")
    }

    @Test
    @kotlinx.serialization.ExperimentalSerializationApi
    fun loadJson1() {

        // val filename = "../example/test.update.json"
        // val filename = "../example/test.remove.json"
        val filename = "../example/order-806.json"
        // val filename = "sss.json"

        val jsonIn = Json {
            explicitNulls = false
            ignoreUnknownKeys = true
        }

        val bsJson2 = jsonIn.decodeFromString<BsJson>(File(filename).readText())

        val jsonOut = Json {
            encodeDefaults = true
            prettyPrint = true
            explicitNulls = false
        }.encodeToString(BsJson.serializer(), bsJson2)

        File("copy.json").writeText(jsonOut)

        assertTrue(true, "Always true not true?!")
    }

    @Test
    @kotlinx.serialization.ExperimentalSerializationApi
    fun writeJsonToFile() {
        val newBsJson = BsJson(
            "SLL-PROD",
            "Region Stockholm - Forvaltningsobjekt Informationsinfrastruktur",
        )

        val contract1 = Contract(
            namnrymd = "urn:riv:alfa:beta:gamma:ContractResponder:1",
            beskrivning = "Ett testkontrakt",
        )

        val contract2 = Contract(
            namnrymd = "urn:riv:alfa:beta:gamma:ContractResponder:1",
            beskrivning = "Ett testkontrakt",
        )

        val component1 = Component(
            hsaId = "123456789",
            beskrivning = "En testkomponent"
        )

        val component2 = Component(
            hsaId = "SE22222222",
            beskrivning = "En andra testkomponent"
        )

        val la1 = LogicalAddress(
            hsaId = "SE-LA-1",
            beskrivning = "En första logisk adress"
        )

        val la2 = LogicalAddress(
            hsaId = "SE-LA-2",
            beskrivning = "En andra logisk adress"
        )

        val auth1 = Authority.create(
            component = component1,
            logicalAddress = la1,
            contract = contract1
        )

        val auth2 = Authority.create(
            component = component2,
            logicalAddress = la2,
            contract = contract2
        )

        val rout1 = Routing.create(
            component = component1,
            logicalAddress = la1,
            contract = contract1,
            rivTaProfile = RivTaProfile.RIVTABP20,
            url = Url("http://adress1")
        )

        val rout2 = Routing.create(
            component = component2,
            logicalAddress = la2,
            contract = contract2,
            rivTaProfile = RivTaProfile.RIVTABP21,
            url = Url("http://adress2")
        )

        newBsJson.includeContract(contract1)
        newBsJson.excludeContract(contract1)
        newBsJson.includeContract(contract2)
        newBsJson.excludeContract(contract2)
        newBsJson.includeComponent(component1)
        newBsJson.excludeComponent(component1)
        newBsJson.includeComponent(component2)
        newBsJson.excludeComponent(component2)
        newBsJson.includeLogicalAddress(la1)
        newBsJson.excludeLogicalAddress(la1)
        newBsJson.includeLogicalAddress(la2)
        newBsJson.excludeLogicalAddress(la2)

        newBsJson.includeAuthority(auth1)
        newBsJson.includeAuthority(auth2)
        newBsJson.excludeAuthority(auth1)
        newBsJson.excludeAuthority(auth2)

        newBsJson.includeRouting(rout1)
        newBsJson.includeRouting(rout2)
        newBsJson.excludeRouting(rout1)
        newBsJson.excludeRouting(rout2)

        newBsJson.writeJsonFile("testfile")

        // assertTrue(true)
    }
}
